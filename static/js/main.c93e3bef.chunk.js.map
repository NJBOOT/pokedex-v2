{"version":3,"sources":["Components/Pokecard/Pokecard.js","Components/Pokedex/Pokedex.js","Components/Pokegame/Pokegame.js","App.js","reportWebVitals.js","index.js"],"names":["Pokecard","props","className","name","src","image","alt","style","fontWeight","textTransform","type","base_exp","Pokedex","message","hand","exp","isWinner","classList","push","join","map","card","number","id","slice","base_experience","Pokegame","state","handOne","handTwo","handOneExp","handTwoExp","shuffleArray","a","i","length","j","Math","floor","random","totalExp","reduce","acc","el","initializeGame","cards","data","shuffled","firstShuffle","secondShuffle","firstShuffleExp","secondShuffleExp","setState","this","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c93e3bef.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Pokecard.css\";\n\nconst Pokecard = props => {\n  return (\n    <div className=\"Pokecard\">\n      <h2>{props.name}</h2>\n      <img src={props.image} alt={`Name: ${props.name}`} />\n      <h4>\n        <span style={{ fontWeight: \"800\" }}>TYPE:</span>{\" \"}\n        <span style={{ textTransform: \"capitalize\" }}>{props.type}</span>\n      </h4>\n      <h4>\n        <span style={{ fontWeight: \"800\" }}>EXP:</span> {props.base_exp}\n      </h4>\n    </div>\n  );\n};\n\nexport default Pokecard;\n","import React from \"react\";\nimport \"./Pokedex.css\";\nimport Pokecard from \"../Pokecard/Pokecard\";\nfunction Pokedex(props) {\n  const { hand, exp, isWinner } = props;\n  const padNumber = number =>\n    number <= 999 ? `00${number}`.slice(-3) : number;\n  let message;\n  let classList = [\"Poxedex-header\"];\n\n  if (isWinner) {\n    classList.push(\"winner\");\n    message = \"YOU WON!\";\n  } else {\n    classList.push(\"loser\");\n    message = \"YOU LOST!\";\n  }\n\n  return (\n    <div className=\"Pokedex\">\n      <div className={classList.join(\" \")}>\n        <h1>Total Exp: {exp}</h1>\n        <h1>{message}</h1>\n      </div>\n      <div className=\"Poxedex-cards\">\n        {hand.map(card => (\n          <Pokecard\n            key={card.id}\n            name={card.name}\n            type={card.type}\n            image={`https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${padNumber(\n              card.id\n            )}.png`}\n            base_exp={card.base_experience}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Pokedex;\n","import React, { Component } from \"react\";\nimport \"./Pokegame.css\";\nimport Pokedex from \"../Pokedex/Pokedex\";\n\nclass Pokegame extends Component {\n  state = {\n    handOne: [],\n    handTwo: [],\n    handOneExp: 0,\n    handTwoExp: 0,\n  };\n\n  shuffleArray = a => {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  };\n\n  totalExp = a => a.reduce((acc, el) => el.base_experience + acc, 0);\n\n  initializeGame = () => {\n    const cards = [...this.props.data];\n    const shuffled = this.shuffleArray(cards);\n    const firstShuffle = shuffled.slice(0, 4);\n    const secondShuffle = shuffled.slice(4);\n    const firstShuffleExp = this.totalExp(firstShuffle);\n    const secondShuffleExp = this.totalExp(secondShuffle);\n\n    this.setState({\n      handOne: firstShuffle,\n      handTwo: secondShuffle,\n      handOneExp: firstShuffleExp,\n      handTwoExp: secondShuffleExp,\n    });\n  };\n\n  componentDidMount() {\n    this.initializeGame();\n  }\n\n  render() {\n    return (\n      <div className=\"Pokegame\">\n        <Pokedex\n          hand={this.state.handOne}\n          exp={this.state.handOneExp}\n          isWinner={this.state.handOneExp > this.state.handTwoExp}\n        />\n        <Pokedex\n          hand={this.state.handTwo}\n          exp={this.state.handTwoExp}\n          isWinner={this.state.handOneExp < this.state.handTwoExp}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Pokegame;\n","import \"./App.css\";\nimport Pokegame from \"./Components/Pokegame/Pokegame\";\n\nconst data = [\n  { id: 4, name: \"Charmander\", type: \"fire\", base_experience: 62 },\n  { id: 7, name: \"Squirtle\", type: \"water\", base_experience: 63 },\n  { id: 11, name: \"Metapod\", type: \"bug\", base_experience: 72 },\n  { id: 12, name: \"Butterfree\", type: \"flying\", base_experience: 178 },\n  { id: 25, name: \"Pikachu\", type: \"electric\", base_experience: 112 },\n  { id: 39, name: \"Jigglypuff\", type: \"normal\", base_experience: 95 },\n  { id: 94, name: \"Gengar\", type: \"poison\", base_experience: 225 },\n  { id: 133, name: \"Eevee\", type: \"normal\", base_experience: 65 },\n];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pokegame data={data} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}